The objective of the game of Super Simple Sudoku is to fill a 9 x 9 square grid with digits 1 - 9 such that no row or column contain duplicate digits.

You are given an almost-completed Super Simple Sudoku board, where each missing digit is the only possible digit in its row and/or the only possible digit in its column. In other words, it is possible to fill in the missing digits independently. Complete the Super Simple Sudoku!
Input
The input is exactly 9 rows, each containing exactly 17 characters.
- The digit characters (1 - 9) denote the filled-in numbers of the Super Simple Sudoku grid.
- Cells in each row of the grid are padded by spaces (" ").
- Missing digits are represented by the question mark (?).
Output
The same 9 x 17 character grid, with all the (?) character(s) replaced with the appropriate missing digit, according to the Super Simple Sudoku rules.
Constraints
- It is possible to determine each missing digit via brute force.
- There will only be one possible solution.

Example
Input
3 8 6 4 1 2 7 9 5
9 5 4 8 7 3 1 6 2
1 2 7 5 9 6 3 8 4
7 6 1 9 2 4 5 3 8
8 9 3 1 ? 7 2 4 6
5 4 2 3 6 8 9 1 7
4 1 8 2 3 5 6 7 9
6 3 5 7 4 9 8 2 1
2 7 9 6 8 1 4 5 3

Output
3 8 6 4 1 2 7 9 5
9 5 4 8 7 3 1 6 2
1 2 7 5 9 6 3 8 4
7 6 1 9 2 4 5 3 8
8 9 3 1 5 7 2 4 6
5 4 2 3 6 8 9 1 7
4 1 8 2 3 5 6 7 9
6 3 5 7 4 9 8 2 1
2 7 9 6 8 1 4 5 3




-------Only see the solution after putting your efforts into it---------

//read inputs
let grid = [];
for (let i = 0; i < 9; i++) grid.push(readline().split(' '));

for (let r = 0; r < 9; r++) {
  for (let c = 0; c < 9; c++) {
    if (grid[r][c] === '?') {
      let possible = new Set(['1','2','3','4','5','6','7','8','9']);
      
      for (let k = 0; k < 9; k++) possible.delete(grid[r][k]);
      
      for (let k = 0; k < 9; k++) possible.delete(grid[k][c]);
      grid[r][c] = [...possible][0]; 
    }
  }
}

for (let r = 0; r < 9; r++) console.log(grid[r].join(' '));

